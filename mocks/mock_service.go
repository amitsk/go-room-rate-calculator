// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/ratecalculation/service.go

// Package ratecalculation is a generated GoMock package.
package ratecalculation

import (
	reflect "reflect"

	ratecalculation "github.com/amitsk/go-room-rate-calculator/pkg/ratecalculation"
	gomock "github.com/golang/mock/gomock"
)

// MockRoomRateRepository is a mock of RoomRateRepository interface.
type MockRoomRateRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRoomRateRepositoryMockRecorder
}

// MockRoomRateRepositoryMockRecorder is the mock recorder for MockRoomRateRepository.
type MockRoomRateRepositoryMockRecorder struct {
	mock *MockRoomRateRepository
}

// NewMockRoomRateRepository creates a new mock instance.
func NewMockRoomRateRepository(ctrl *gomock.Controller) *MockRoomRateRepository {
	mock := &MockRoomRateRepository{ctrl: ctrl}
	mock.recorder = &MockRoomRateRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoomRateRepository) EXPECT() *MockRoomRateRepositoryMockRecorder {
	return m.recorder
}

// GetBaseRoomRate mocks base method.
func (m *MockRoomRateRepository) GetBaseRoomRate(zipCode ratecalculation.ZipCode) (ratecalculation.RoomRate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBaseRoomRate", zipCode)
	ret0, _ := ret[0].(ratecalculation.RoomRate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBaseRoomRate indicates an expected call of GetBaseRoomRate.
func (mr *MockRoomRateRepositoryMockRecorder) GetBaseRoomRate(zipCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBaseRoomRate", reflect.TypeOf((*MockRoomRateRepository)(nil).GetBaseRoomRate), zipCode)
}

// MockTaxRateRepository is a mock of TaxRateRepository interface.
type MockTaxRateRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTaxRateRepositoryMockRecorder
}

// MockTaxRateRepositoryMockRecorder is the mock recorder for MockTaxRateRepository.
type MockTaxRateRepositoryMockRecorder struct {
	mock *MockTaxRateRepository
}

// NewMockTaxRateRepository creates a new mock instance.
func NewMockTaxRateRepository(ctrl *gomock.Controller) *MockTaxRateRepository {
	mock := &MockTaxRateRepository{ctrl: ctrl}
	mock.recorder = &MockTaxRateRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaxRateRepository) EXPECT() *MockTaxRateRepositoryMockRecorder {
	return m.recorder
}

// GetTaxRate mocks base method.
func (m *MockTaxRateRepository) GetTaxRate(zipCode ratecalculation.ZipCode) (ratecalculation.TaxRate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaxRate", zipCode)
	ret0, _ := ret[0].(ratecalculation.TaxRate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaxRate indicates an expected call of GetTaxRate.
func (mr *MockTaxRateRepositoryMockRecorder) GetTaxRate(zipCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaxRate", reflect.TypeOf((*MockTaxRateRepository)(nil).GetTaxRate), zipCode)
}
